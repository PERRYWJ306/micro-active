%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2362 787
%%HiResBoundingBox: 0 0 2361.1199 786.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2361.1199 786.95996 re
W
q
[0.24 0 0 -0.24 0 786.95996] cm
q
0 0 9837.5 3278.125 re
W*
q
[3.125184 0 0 3.124222 0.0490223 0] cm
/DeviceRGB {} CS
[0.1059 0.1059 0.1059] SC
/DeviceRGB {} cs
[0.1059 0.1059 0.1059] sc
0 0 3147.7832 1049.26111 re
f
Q
q
[37.896328 0 0 37.884666 56.271267 503.13824] cm
/DeviceRGB {} CS
[0.3843 0.7569 0.749] SC
/DeviceRGB {} cs
[0.3843 0.7569 0.749] sc
35.389984 12.429932 m
31.259979 12.429932 27.410004 14.5 25.069977 17.859985 c
17.449982 13.449951 l
17.720001 12.76001 17.860016 12.01001 17.860016 11.229981 c
17.860016 7.800049 15.069977 5 11.629974 5 c
8.189972 5 5.389984 7.800049 5.389984 11.229981 c
5.389984 14.669922 8.189972 17.469971 11.629974 17.469971 c
13.569977 17.469971 15.309967 16.579956 16.449982 15.179932 c
24.069977 19.589966 l
23.259979 21.27002 22.819977 23.109985 22.819977 25 c
22.819977 27.469971 23.529999 29.829956 24.850006 31.849976 c
14.480011 42.209961 l
13.459992 41.459961 12.199982 41.030029 10.850006 41.030029 c
7.410004 41.030029 4.610016 43.829956 4.610016 47.26001 c
4.610016 50.699951 7.410004 53.5 10.850006 53.5 c
14.290008 53.5 17.079987 50.699951 17.079987 47.26001 c
17.079987 45.899902 16.639984 44.649902 15.889984 43.629883 c
26.100006 33.439941 l
26.209991 33.569946 26.319977 33.699951 26.439972 33.829956 c
26.639984 33.22998 l
27.559967 30.609985 30.019989 28.859985 32.779999 28.859985 c
38.009979 28.859985 l
40.749969 28.859985 43.199982 30.589966 44.110016 33.169922 c
44.389984 33.76001 l
46.639984 31.449951 47.970001 28.309937 47.970001 25 c
47.970001 18.069946 42.319977 12.429932 35.389984 12.429932 c
h
35.389984 27.409912 m
32.779999 27.409912 30.660004 25.280029 30.660004 22.669922 c
30.660004 20.059937 32.779999 17.939941 35.389984 17.939941 c
37.999969 17.939941 40.129974 20.059937 40.129974 22.669922 c
40.129974 25.280029 37.999969 27.409912 35.389984 27.409912 c
h
f
55.389984 48.76001 m
55.389984 52.199951 52.589996 55 49.160004 55 c
45.720001 55 42.920013 52.199951 42.920013 48.76001 c
42.920013 46.819946 43.809967 45.079956 45.209991 43.939941 c
40.790009 36.329956 l
39.119965 37.119995 37.269989 37.569946 35.389984 37.569946 c
32.730011 37.569946 30.199982 36.73999 28.089996 35.22998 c
28.529999 33.879883 l
29.160004 32.069946 30.869965 30.859985 32.779999 30.859985 c
38.009979 30.859985 l
39.920013 30.859985 41.619965 32.069946 42.23996 33.869995 c
42.249969 33.899902 42.269989 33.939941 42.279999 33.969971 c
42.819977 35.119995 l
42.720001 35.189941 42.610016 35.25 42.509979 35.329956 c
46.939972 42.939941 l
47.629974 42.669922 48.379974 42.530029 49.160004 42.530029 c
52.589996 42.530029 55.389984 45.329956 55.389984 48.76001 c
h
f
Q
q
[23.092493 0 0 23.085386 9583.4336 230.85387] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-302 0 3 122 re
f
Q
q
[43.407558 0 0 43.394203 2962.8279 691.38849] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
17.354 20 m
15.0395 20 l
14.121531 9.004 l
10.12743 20 l
8.66263 20 l
4.68803 9.023 l
3.7603 20 l
1.4361 20 l
2.5494 6.074 l
5.8014 6.074 l
9.385401 15.9178 l
12.998701 6.074 l
16.250702 6.074 l
17.354 20 l
h
20.781263 20 m
20.781263 6.074 l
23.115263 6.074 l
23.115263 20 l
20.781263 20 l
h
33.164021 20.185551 m
29.16012 20.185551 26.132721 17.451151 26.132721 13.027351 c
26.132721 8.623051 29.160021 5.878951 33.164021 5.878951 c
36.093719 5.878951 38.496021 7.363352 39.541019 9.853552 c
37.363319 10.683632 l
36.640659 9.013732 35.05862 8.056632 33.16412 8.056632 c
30.52742 8.056632 28.46682 9.892532 28.46682 13.027332 c
28.46682 16.181633 30.527319 18.007832 33.16412 18.007832 c
35.05862 18.007832 36.64072 17.060562 37.363319 15.390632 c
39.541019 16.220711 l
38.49612 18.710911 36.093719 20.185511 33.164021 20.185511 c
33.164021 20.185551 l
h
49.687542 20 m
46.074242 13.789101 l
44.570343 13.789101 l
44.570343 20 l
42.236343 20 l
42.236343 6.074 l
47.070343 6.074 l
50.087944 6.074 51.416042 7.880601 51.416042 10.117001 c
51.416042 12.060401 50.263741 13.369 48.418041 13.701 c
52.43174 19.9998 l
49.687641 19.9998 l
49.687542 20 l
h
44.570339 8.047 m
44.570339 12.0607 l
46.728539 12.0607 l
48.437538 12.0607 49.169937 11.259919 49.169937 10.0685 c
49.169937 8.8869 48.437515 8.046999 46.728539 8.046999 c
44.570339 8.046999 l
44.570339 8.047 l
h
61.064411 20.185551 m
57.060513 20.185551 54.033112 17.44145 54.033112 13.027351 c
54.033112 8.623051 57.060413 5.878951 61.064411 5.878951 c
65.05851 5.878951 68.085915 8.623052 68.085915 13.027351 c
68.085915 17.441452 65.058617 20.185551 61.064415 20.185551 c
61.064411 20.185551 l
h
61.064411 18.017599 m
63.701111 18.017599 65.761711 16.191399 65.761711 13.027399 c
65.761711 9.892599 63.70121 8.056699 61.064411 8.056699 c
58.427612 8.056699 56.367111 9.892599 56.367111 13.027399 c
56.367111 16.1915 58.427612 18.017599 61.064411 18.017599 c
h
85.449409 20 m
84.345909 16.904301 l
78.261909 16.904301 l
77.168106 20 l
74.756004 20 l
79.883003 6.074 l
82.7248 6.074 l
87.851799 20 l
85.449501 20 l
85.449409 20 l
h
78.974609 14.9023 m
83.642609 14.9023 l
81.308609 8.3203 l
78.974609 14.9023 l
h
96.357384 20.185551 m
92.353485 20.185551 89.32608 17.451151 89.32608 13.027351 c
89.32608 8.623051 92.353378 5.878951 96.357384 5.878951 c
99.287086 5.878951 101.689384 7.363352 102.734383 9.853552 c
100.556686 10.683632 l
99.83403 9.013732 98.251984 8.056632 96.357483 8.056632 c
93.720779 8.056632 91.660187 9.892532 91.660187 13.027332 c
91.660187 16.181633 93.720688 18.007832 96.357483 18.007832 c
98.251984 18.007832 99.834084 17.060562 100.556686 15.390632 c
102.73439 16.220711 l
101.689491 18.710911 99.287094 20.185511 96.357391 20.185511 c
96.357384 20.185551 l
h
113.115196 6.074 m
113.115196 8.1541 l
109.677696 8.1541 l
109.677696 20.000099 l
107.353493 20.000099 l
107.353493 8.1541 l
103.906189 8.1541 l
103.906189 6.073999 l
113.115189 6.073999 l
113.115196 6.074 l
h
115.576187 20 m
115.576187 6.074 l
117.910187 6.074 l
117.910187 20 l
115.576187 20 l
h
130.615341 6.074 m
133.09584 6.074 l
127.959137 20 l
125.449341 20 l
120.341942 6.074 l
122.812645 6.074 l
126.718948 17.197001 l
130.615341 6.074 l
h
143.300751 8.154 m
137.890549 8.154 l
137.890549 12.0114 l
142.675751 12.0114 l
142.675751 14.0719 l
137.890549 14.0719 l
137.890549 17.909801 l
143.300751 17.909801 l
143.300751 19.999601 l
135.527344 19.999601 l
135.527344 6.073602 l
143.300751 6.073602 l
143.300751 8.153702 l
143.300751 8.154 l
h
f
Q
q
[21.0228 0 0 21.016333 3005.4043 1916.3446] cm
/DeviceRGB {} CS
[0.3843 0.7569 0.749] SC
/DeviceRGB {} cs
[0.3843 0.7569 0.749] sc
8.34 5.48 m
10.700001 5.48 12.4534 6.0933 13.6 7.32 c
12.240001 8.780001 l
11.186701 7.780001 9.880001 7.280001 8.320001 7.280001 c
6.76 7.280001 5.480001 7.816661 4.480001 8.89 c
3.480001 9.96334 2.980001 11.306601 2.980001 12.92 c
2.980001 14.5467 3.510001 15.8934 4.570001 16.959999 c
5.630001 18.026598 6.933401 18.559999 8.480001 18.559999 c
9.946701 18.559999 11.106601 18.313339 11.960001 17.82 c
11.960001 13.879999 l
8.820001 13.879999 l
8.820001 12.079999 l
13.880001 12.079999 l
13.880001 19.059999 l
13.186661 19.473339 12.350001 19.793339 11.370001 20.02 c
10.39 20.246662 9.440001 20.360001 8.520001 20.360001 c
6.293401 20.360001 4.473401 19.66666 3.06 18.280001 c
1.6466 16.893341 0.940001 15.106601 0.940001 12.92 c
0.940001 10.8134 1.636661 9.0466 3.03 7.62 c
4.42334 6.193399 6.1934 5.48 8.34 5.48 c
8.34 5.48 l
h
27.504 5.48 m
29.6106 5.48 31.367399 6.17998 32.773998 7.58 c
34.180595 8.98002 34.883999 10.76 34.883999 12.92 c
34.883999 14.2933 34.57066 15.55 33.944 16.690001 c
33.317341 17.830002 32.434002 18.726601 31.294001 19.380001 c
30.153999 20.033401 28.8906 20.360001 27.504002 20.360001 c
26.130701 20.360001 24.877401 20.036661 23.744001 19.390001 c
22.610601 18.743341 21.724001 17.850002 21.084002 16.710001 c
20.444002 15.57 20.124001 14.306601 20.124001 12.920001 c
20.124001 10.813401 20.814001 9.046601 22.194 7.620001 c
23.573999 6.1934 25.344 5.480001 27.504 5.480001 c
27.504 5.48 l
h
22.164 12.92 m
22.164 14.520001 22.66398 15.860001 23.664 16.940001 c
24.664019 18.02 25.944 18.560001 27.504 18.560001 c
29.0373 18.560001 30.3106 18.026661 31.323999 16.960001 c
32.337399 15.893341 32.843998 14.546601 32.843998 12.920001 c
32.843998 11.306701 32.343998 9.963401 31.343998 8.890001 c
30.343998 7.816602 29.057398 7.280001 27.483997 7.280001 c
25.963997 7.280001 24.697397 7.813341 23.683998 8.880001 c
22.670599 9.946661 22.163998 11.293401 22.163998 12.920001 c
22.164 12.92 l
h
55.452 5.84 m
56.7453 5.84 57.771999 6.16 58.531998 6.8 c
59.291996 7.44 59.671997 8.3 59.671997 9.38 c
59.671997 10.9133 58.858658 11.9534 57.231998 12.5 c
57.231998 12.54 l
57.251999 12.54 l
58.171997 12.64666 58.908699 13.03 59.461998 13.69 c
60.015297 14.349999 60.292 15.139999 60.292 16.06 c
60.292 17.2467 59.835339 18.199999 58.922001 18.92 c
58.008663 19.640001 56.832001 20 55.392002 20 c
50.452003 20 l
50.452003 5.84 l
55.452003 5.84 l
55.452 5.84 l
h
55.051998 11.72 m
55.851997 11.72 56.481998 11.53666 56.941998 11.17 c
57.401997 10.80334 57.631996 10.28 57.631996 9.6 c
57.631996 8.96 57.431995 8.453301 57.031998 8.08 c
56.632 7.706699 56.105339 7.52 55.451996 7.52 c
52.371994 7.52 l
52.371994 11.719999 l
55.051994 11.719999 l
55.051998 11.72 l
h
55.271999 18.32 m
56.218658 18.32 56.952 18.1 57.472 17.66 c
57.992001 17.219999 58.251999 16.639999 58.251999 15.92 c
58.251999 15.12 57.988659 14.5 57.461998 14.06 c
56.935337 13.620001 56.191998 13.400001 55.231998 13.400001 c
52.371998 13.400001 l
52.371998 18.32 l
55.271999 18.32 l
h
75.816002 5.84 m
75.816002 7.64 l
68.596001 7.64 l
68.596001 11.860001 l
75.316002 11.860001 l
75.316002 13.660001 l
68.596001 13.660001 l
68.596001 18.200001 l
76.176003 18.200001 l
76.176003 20 l
66.676003 20 l
66.676003 5.84 l
75.816002 5.84 l
h
82.959999 5.84 m
86.82 12.06 l
90.800003 5.84 l
93.139999 5.84 l
87.779999 13.959999 l
87.779999 20 l
85.860001 20 l
85.860001 13.96 l
80.5 5.84 l
82.959999 5.84 l
h
104.884003 5.48 m
106.990601 5.48 108.747406 6.17998 110.153999 7.58 c
111.560593 8.98002 112.264 10.76 112.264 12.92 c
112.264 14.2933 111.950661 15.55 111.323997 16.690001 c
110.697334 17.830002 109.813995 18.726601 108.673996 19.380001 c
107.533997 20.033401 106.270599 20.360001 104.883995 20.360001 c
103.510696 20.360001 102.257393 20.036661 101.123993 19.390001 c
99.990593 18.743341 99.103996 17.850002 98.463989 16.710001 c
97.823982 15.57 97.50399 14.306601 97.50399 12.920001 c
97.50399 10.813401 98.193993 9.046601 99.57399 7.620001 c
100.953987 6.1934 102.723991 5.480001 104.883987 5.480001 c
104.884003 5.48 l
h
99.543999 12.92 m
99.543999 14.520001 100.043976 15.860001 101.043999 16.940001 c
102.044022 18.02 103.323997 18.560001 104.884003 18.560001 c
106.417305 18.560001 107.690605 18.026661 108.704002 16.960001 c
109.7174 15.893341 110.223999 14.546601 110.223999 12.920001 c
110.223999 11.306701 109.723999 9.963401 108.723999 8.890001 c
107.723999 7.816602 106.437401 7.280001 104.863998 7.280001 c
103.344002 7.280001 102.0774 7.813341 101.063995 8.880001 c
100.050591 9.946661 99.543999 11.293401 99.543999 12.920001 c
99.543999 12.92 l
h
121.167999 5.84 m
128.968002 17.48 l
129.007996 17.48 l
129.007996 5.839999 l
130.927994 5.839999 l
130.927994 20 l
128.487991 20 l
120.607994 8.36 l
120.567993 8.36 l
120.567993 20 l
118.647995 20 l
118.647995 5.84 l
121.167992 5.84 l
121.167999 5.84 l
h
142.912003 5.84 m
144.418701 5.84 145.725403 6.15 146.832001 6.770001 c
147.938599 7.390001 148.785294 8.240001 149.371994 9.320001 c
149.958694 10.400001 150.251999 11.6 150.251999 12.92 c
150.251999 14.24 149.925339 15.4434 149.272003 16.530001 c
148.618668 17.6166 147.705307 18.466702 146.531998 19.08 c
145.358688 19.693298 144.052002 20 142.612 20 c
137.871994 20 l
137.871994 5.84 l
142.911987 5.84 l
142.912003 5.84 l
h
142.311996 18.200001 m
143.391998 18.200001 144.382004 17.989981 145.281998 17.569981 c
146.181992 17.149981 146.895294 16.54668 147.421997 15.759981 c
147.9487 14.973282 148.21199 14.026681 148.21199 12.919981 c
148.21199 11.319981 147.715332 10.039981 146.721985 9.079981 c
145.728638 8.119981 144.411987 7.639981 142.771988 7.639981 c
139.791992 7.639981 l
139.791992 18.199982 l
142.311996 18.199982 l
142.311996 18.200001 l
h
167.740005 5.84 m
167.740005 20 l
165.820007 20 l
165.820007 5.84 l
167.740005 5.84 l
h
179.724 5.84 m
181.2307 5.84 182.5374 6.15 183.644 6.770001 c
184.7506 7.390001 185.59729 8.240001 186.18399 9.320001 c
186.77069 10.400001 187.064 11.6 187.064 12.92 c
187.064 14.24 186.73734 15.4434 186.084 16.530001 c
185.43066 17.6166 184.5173 18.466702 183.34399 19.08 c
182.17068 19.693298 180.864 20 179.424 20 c
174.68399 20 l
174.68399 5.84 l
179.72398 5.84 l
179.724 5.84 l
h
179.12399 18.200001 m
180.20399 18.200001 181.194 17.989981 182.09399 17.569981 c
182.99399 17.149981 183.70729 16.54668 184.23399 15.759981 c
184.7607 14.973282 185.02399 14.026681 185.02399 12.919981 c
185.02399 11.319981 184.52733 10.039981 183.53398 9.079981 c
182.54063 8.119981 181.22398 7.639981 179.58398 7.639981 c
176.60399 7.639981 l
176.60399 18.199982 l
179.12399 18.199982 l
179.12399 18.200001 l
h
202.588 5.84 m
202.588 7.64 l
195.368 7.64 l
195.368 11.860001 l
202.088 11.860001 l
202.088 13.660001 l
195.368 13.660001 l
195.368 18.200001 l
202.948 18.200001 l
202.948 20 l
193.448 20 l
193.448 5.84 l
202.588 5.84 l
h
215.472 5.84 m
221.532 20 l
219.29199 20 l
217.87199 16.5 l
211.13199 16.5 l
209.73199 20 l
207.49199 20 l
213.73199 5.84 l
215.472 5.84 l
h
211.812 14.82 m
217.172 14.82 l
214.532 8.32 l
214.492 8.32 l
211.812 14.82 l
h
231.056 5.48 m
232.896 5.48 234.256 6.02006 235.136 7.1001 c
233.576 8.5201 l
233.336 8.14676 232.996 7.84676 232.556 7.620099 c
232.116 7.393439 231.60934 7.280099 231.036 7.280099 c
230.20934 7.280099 229.54599 7.483439 229.04599 7.8901 c
228.54599 8.29676 228.29599 8.8201 228.29599 9.460099 c
228.29599 10.526799 229.00266 11.273399 230.41599 11.700099 c
232.19598 12.280099 l
233.19598 12.600099 233.95929 13.046759 234.48598 13.620099 c
235.01266 14.19344 235.27597 14.980099 235.27597 15.980099 c
235.27597 17.286798 234.81264 18.343498 233.88597 19.150099 c
232.9593 19.956699 231.78258 20.3601 230.35597 20.3601 c
228.31598 20.3601 226.80937 19.70676 225.83597 18.400101 c
227.41597 17.0401 l
227.72263 17.5201 228.14262 17.89344 228.67596 18.160101 c
229.2093 18.426762 229.78926 18.560101 230.41597 18.560101 c
231.20264 18.560101 231.86926 18.333441 232.41597 17.8801 c
232.96268 17.42676 233.23598 16.8668 233.23598 16.2001 c
233.23598 15.70676 233.06932 15.29342 232.73598 14.9601 c
232.40263 14.626781 231.80264 14.32676 230.93597 14.060101 c
229.67598 13.640101 l
228.40929 13.213441 227.52258 12.6701 227.01598 12.0101 c
226.50937 11.350101 226.25598 10.5001 226.25598 9.4601 c
226.25598 8.3534 226.70264 7.4135 227.59598 6.6401 c
228.48932 5.866701 229.64258 5.480101 231.05598 5.480101 c
231.056 5.48 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
